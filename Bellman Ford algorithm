#include <iostream>
#include <vector>
#include <limits>

// Define a structure for an edge
struct Edge {
    int source;
    int destination;
    int weight;

    Edge(int src, int dest, int w) : source(src), destination(dest), weight(w) {}
};

// Define a class for the graph
class Graph {
    int vertices;
    std::vector<Edge> edgeList;

public:
    Graph(int V) : vertices(V) {}

    void addEdge(int source, int dest, int weight) {
        edgeList.emplace_back(source, dest, weight);
    }

    void bellmanFord(int source) {
        std::vector<int> distance(vertices, std::numeric_limits<int>::max());
        distance[source] = 0;

        for (int i = 1; i < vertices; i++) {
            for (const Edge& edge : edgeList) {
                int u = edge.source;
                int v = edge.destination;
                int w = edge.weight;

                if (distance[u] != std::numeric_limits<int>::max() && distance[u] + w < distance[v]) {
                    distance[v] = distance[u] + w;
                }
            }
        }

        // Check for negative weight cycles
        for (const Edge& edge : edgeList) {
            int u = edge.source;
            int v = edge.destination;
            int w = edge.weight;

            if (distance[u] != std::numeric_limits<int>::max() && distance[u] + w < distance[v]) {
                std::cout << "Negative weight cycle detected!" << std::endl;
                return;
            }
        }

        // Print the shortest distances from the source vertex
        std::cout << "Shortest distances from vertex " << source << " to all other vertices:" << std::endl;
        for (int i = 0; i < vertices; i++) {
            std::cout << "Vertex " << i << ": " << distance[i] << std::endl;
        }
    }
};

int main() {
    // Create a sample graph
    Graph g(5);
    g.addEdge(0, 1, -1);
    g.addEdge(0, 2, 4);
    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 2);
    g.addEdge(1, 4, 2);
    g.addEdge(3, 2, 5);
    g.addEdge(3, 1, 1);
    g.addEdge(4, 3, -3);

    int sourceVertex = 0;
    g.bellmanFord(sourceVertex);

    return 0;
}

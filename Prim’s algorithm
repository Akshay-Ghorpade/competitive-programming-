#include <iostream>
#include <vector>
#include <limits>

// Define a structure for an edge
struct Edge {
    int source;
    int destination;
    int weight;

    Edge(int src, int dest, int w) : source(src), destination(dest), weight(w) {}
};

// Define a class for the graph
class Graph {
    int vertices;
    std::vector<std::vector<std::pair<int, int>>> adjacencyList;

public:
    Graph(int V) : vertices(V) {
        adjacencyList.resize(V);
    }

    void addEdge(int source, int dest, int weight) {
        adjacencyList[source].emplace_back(dest, weight);
        adjacencyList[dest].emplace_back(source, weight); // for undirected graph
    }

    void primMST() {
        std::vector<bool> inMST(vertices, false);
        std::vector<int> key(vertices, std::numeric_limits<int>::max());
        std::vector<int> parent(vertices, -1);

        key[0] = 0;

        for (int count = 0; count < vertices - 1; count++) {
            int u = -1;
            int minKey = std::numeric_limits<int>::max();

            for (int v = 0; v < vertices; v++) {
                if (!inMST[v] && key[v] < minKey) {
                    u = v;
                    minKey = key[v];
                }
            }

            inMST[u] = true;

            for (const auto& neighbor : adjacencyList[u]) {
                int v = neighbor.first;
                int weight = neighbor.second;

                if (!inMST[v] && weight < key[v]) {
                    parent[v] = u;
                    key[v] = weight;
                }
            }
        }

        // Print the MST edges
        std::cout << "Minimum Spanning Tree Edges:" << std::endl;
        for (int i = 1; i < vertices; i++) {
            std::cout << "Edge: " << parent[i] << " - " << i << " Weight: " << key[i] << std::endl;
        }
    }
};

int main() {
    // Create a sample graph
    Graph g(5);
    g.addEdge(0, 1, 2);
    g.addEdge(0, 3, 6);
    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 8);
    g.addEdge(1, 4, 5);
    g.addEdge(2, 4, 7);
    g.addEdge(3, 4, 9);

    g.primMST();

    return 0;
}

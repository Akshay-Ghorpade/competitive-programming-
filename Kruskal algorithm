#include <iostream>
#include <vector>
#include <algorithm>

// Define a structure for an edge
struct Edge {
    int source;
    int destination;
    int weight;

    Edge(int src, int dest, int w) : source(src), destination(dest), weight(w) {}
};

// Define a class for the graph
class Graph {
    int vertices;
    std::vector<Edge> edgeList;

public:
    Graph(int V) : vertices(V) {}

    void addEdge(int source, int dest, int weight) {
        edgeList.emplace_back(source, dest, weight);
    }

    // Find the parent of a vertex in a set
    int find(int vertex, std::vector<int>& parent) {
        if (parent[vertex] == -1) {
            return vertex;
        }
        return find(parent[vertex], parent);
    }

    // Union two sets by rank
    void unionSets(int x, int y, std::vector<int>& parent, std::vector<int>& rank) {
        int rootX = find(x, parent);
        int rootY = find(y, parent);

        if (rootX != rootY) {
            if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }

    void kruskalMST() {
        std::vector<int> parent(vertices, -1);
        std::vector<int> rank(vertices, 0);

        // Sort edges by weight
        std::sort(edgeList.begin(), edgeList.end(), [](const Edge& a, const Edge& b) {
            return a.weight < b.weight;
        });

        std::vector<Edge> mstEdges;
        int mstWeight = 0;

        for (const Edge& edge : edgeList) {
            int u = edge.source;
            int v = edge.destination;

            int setU = find(u, parent);
            int setV = find(v, parent);

            if (setU != setV) {
                mstEdges.push_back(edge);
                mstWeight += edge.weight;
                unionSets(setU, setV, parent, rank);
            }
        }

        // Print the MST edges
        std::cout << "Minimum Spanning Tree Edges:" << std::endl;
        for (const Edge& edge : mstEdges) {
            std::cout << "Edge: " << edge.source << " - " << edge.destination << " Weight: " << edge.weight << std::endl;
        }

        std::cout << "Total MST Weight: " << mstWeight << std::endl;
    }
};

int main() {
    // Create a sample graph
    Graph g(5);
    g.addEdge(0, 1, 2);
    g.addEdge(0, 3, 6);
    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 8);
    g.addEdge(1, 4, 5);
    g.addEdge(2, 4, 7);
    g.addEdge(3, 4, 9);

    g.kruskalMST();

    return 0;
}

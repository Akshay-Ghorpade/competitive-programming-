#include <iostream>
#include <vector>
#include <list>

class Graph {
private:
    int V; // Number of vertices
    std::vector<std::list<int>> adj; // Adjacency list

    bool isCyclicUtil(int v, std::vector<bool>& visited, std::vector<bool>& recStack) {
        if (!visited[v]) {
            visited[v] = true;
            recStack[v] = true;

            for (const auto& neighbor : adj[v]) {
                if (!visited[neighbor] && isCyclicUtil(neighbor, visited, recStack))
                    return true;
                else if (recStack[neighbor])
                    return true;
            }
        }
        recStack[v] = false;
        return false;
    }

public:
    Graph(int vertices) : V(vertices) {
        adj.resize(vertices);
    }

    void addEdge(int v, int w) {
        adj[v].push_back(w);
    }

    bool isCyclic() {
        std::vector<bool> visited(V, false);
        std::vector<bool> recStack(V, false);

        for (int i = 0; i < V; i++) {
            if (isCyclicUtil(i, visited, recStack))
                return true;
        }

        return false;
    }
};

int main() {
    // Create a sample graph
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);

    if (g.isCyclic())
        std::cout << "The graph contains a cycle." << std::endl;
    else
        std::cout << "The graph does not contain a cycle." << std::endl;

    return 0;
}

#include <iostream>
#include <vector>
#include <queue>

// Define a class for the graph
class Graph {
    int vertices;
    std::vector<std::vector<int>> adjacencyList;

public:
    Graph(int V) : vertices(V) {
        adjacencyList.resize(V);
    }

    void addEdge(int u, int v) {
        adjacencyList[u].push_back(v);
    }

    void BFS(int startVertex) {
        std::vector<bool> visited(vertices, false); // Mark all vertices as not visited
        std::queue<int> queue; // Create a queue for BFS

        visited[startVertex] = true;
        queue.push(startVertex);

        while (!queue.empty()) {
            int currentVertex = queue.front();
            std::cout << currentVertex << " ";
            queue.pop();

            for (int neighbor : adjacencyList[currentVertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.push(neighbor);
                }
            }
        }
    }
};

int main() {
    // Create a sample graph
    Graph g(7);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);

    std::cout << "Breadth-First Traversal starting from vertex 0: ";
    g.BFS(0);

    return 0;
}

/*Dijkstra's algorithm is used to find the shortest path from a single source vertex to all other vertices in a weighted graph, 
where all edge weights are non-negative. It maintains a set of vertices with known minimum distance from the source and a set of 
vertices with unknown minimum distance. Initially, the source vertex has a distance of 0, and all other vertices have a distance of infinity.*/


#include <iostream>
#include <vector>
#include <limits>
#include <set>

// Define a structure for an edge
struct Edge {
    int destination;
    int weight;

    Edge(int dest, int w) : destination(dest), weight(w) {}
};

// Define a class for the graph
class Graph {
    int vertices;
    std::vector<std::vector<Edge>> adjacencyList;

public:
    Graph(int V) : vertices(V) {
        adjacencyList.resize(V);
    }

    void addEdge(int source, int dest, int weight) {
        adjacencyList[source].emplace_back(dest, weight);
        adjacencyList[dest].emplace_back(source, weight); // for undirected graph
    }

    void dijkstra(int source) {
        std::vector<int> distance(vertices, std::numeric_limits<int>::max());
        distance[source] = 0;

        std::set<std::pair<int, int>> minDistances;
        minDistances.insert({0, source});

        while (!minDistances.empty()) {
            int currentVertex = minDistances.begin()->second;
            minDistances.erase(minDistances.begin());

            for (const Edge& edge : adjacencyList[currentVertex]) {
                int neighbor = edge.destination;
                int weight = edge.weight;

                int newDistance = distance[currentVertex] + weight;

                if (newDistance < distance[neighbor]) {
                    minDistances.erase({distance[neighbor], neighbor});
                    distance[neighbor] = newDistance;
                    minDistances.insert({distance[neighbor], neighbor});
                }
            }
        }

        // Print the shortest distances from the source vertex
        std::cout << "Shortest distances from vertex " << source << " to all other vertices:" << std::endl;
        for (int i = 0; i < vertices; i++) {
            std::cout << "Vertex " << i << ": " << distance[i] << std::endl;
        }
    }
};

int main() {
    // Create a sample graph
    Graph g(6);
    g.addEdge(0, 1, 2);
    g.addEdge(0, 2, 4);
    g.addEdge(1, 2, 1);
    g.addEdge(1, 3, 7);
    g.addEdge(2, 3, 3);
    g.addEdge(2, 4, 5);
    g.addEdge(3, 4, 2);
    g.addEdge(3, 5, 1);
    g.addEdge(4, 5, 7);

    int sourceVertex = 0;
    g.dijkstra(sourceVertex);

    return 0;
}
